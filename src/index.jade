doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title How to Cook a Graph Database in a Night

    link(rel="icon", type="image/png", href="/images/favicon.png")
    link(rel="apple-touch-icon", type="image/png" href="/images/default-apple-touch-icon.png")

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel="stylesheet", type='text/css', href="bower_components/font-awesome/css/font-awesome.min.css")
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section
        h1 How to Cook a Graph Database in a Night
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a>

      section
        h2 What is a Graph Database?

      section
        h3(style="text-align: left; width: 500px")
          i(style="float: left; padding-right: 20px").fa.fa-quote-left.fa-2x
          | a graph database is any storage system that provides index-free adjacency
          br
        h3
          em Anonymous Wikipedian

      section.full-imgs
        h2 Models and Relationships
        br
        br
        br
        table
          thead
            tr
              th Model
              th Example
              th Fast for Relationships
          tbody
            tr
              td Documental
              td MongoDB
              td(style="background-color: red")
            tr
              td Relational
              td MySQL
              td(style="background-color: yellow")
            tr
              td Graph
              td OrientDB
              td(style="background-color: green")

        // A graph database is <em>fast</em> at traversing relations.

      section.full-imgs
        h2 The smallest possible graph
        br
        br
        div
          div(style="width: 40%; float: right; display: inline-block;")
            ul.bullet
              li "A" is called <em>subject</em>
              li "B" is called <em>object</em>
              li "A" and "B" are also called <em>vertexes</em>
              li "C" is called <em>predicate</em>
              li "C" is also called <em>arc</em>
          div(style="width: 70%; display: inline-block; float: left; margin-left: -10%;")
            img(src="/images/basic_graph.png")

      section.full-imgs
        h2 Query Examples
        br
        br
        div
          div(style="width: 40%; float: right; display: inline-block;")
            ul.bullet
              li Give me all the vertex that go from "A"
              li Give me all the pairs connected by "C"
              li Give me all the vertex that go to "B"
              li Give me all the vertex that go to "B" <em>through "C"</em>
              li ...
          div(style="width: 70%; display: inline-block; float: left; margin-left: -10%;")
            img(src="/images/basic_graph.png")

      section.full-imgs
        h2 Hexastore: the fastest data structure for a Graph
        img(src="/images/hexastore.png")
        .copyright
          a(href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.140.8776&rep=rep1&type=pdf")
            | Weiss et al.,
            em "Hexastore: Sextuple Indexing for Semantic Web Data Management"

      section(data-bespoke-state='cooking')
        h2 My Secret Ingredient for a Graph Database
        .copyright
          a(href="http://500px.com/photo/52159764", style="color: white") http://500px.com/photo/52159764 &nbsp;
          a(href="http://creativecommons.org/licenses/by/3.0/deed.en_US")
            img(src="/images/cc_attribution.png")

      section(data-bespoke-state='cooking')
        h2 LevelUp!
        br
        h3.bullet
          a(href="http://github.com/rvagg/node-levelup", style="color: white") http://github.com/rvagg/node-levelup
        h3.bullet
          em The 
          a(href="http://leveldb.googlecode.com") LevelDB 
          | library for Node.js
        h3.bullet
          a(href="http://leveldb.googlecode.com") LevelDB 
          | is an 
          em ordered 
          | key-value store that can be embedded in ANY app

        .copyright
          a(href="http://500px.com/photo/52159764", style="color: white") http://500px.com/photo/52159764 &nbsp;
          a(href="http://creativecommons.org/licenses/by/3.0/deed.en_US")
            img(src="/images/cc_attribution.png")

      section.full-imgs
        h2 LevelDB
        br
        br
        div
          div(style="width: 40%; float: right; display: inline-block; text-align: left;")
            | basic features:
            ul.bullet
              li get
              li put
              li del
              li batch
              li ordered iterator
          div(style="width: 50%; display: inline-block; float: left;")
            img(src="/images/example_leveldb.png")

      section
        h2 LevelUp
        pre
          code.language-javascript.
            var db = level('your_database')
            db.put('a', 'b', function() {
              db.put('b', 'c', function() {
                db.get('a', function(err, data) {
                  alert(JSON.stringify(data))
                  db.close();
                })
              })
            })
        a(data-bespoke-run) Run!

      section
        h2 ReadStream
        pre
          code.language-javascript.
            var db = level('your_database')
            var stream = db.createReadStream({
              start: 'a',
              end: 'd'
            })

            stream.on('data', function(data) {
              alert(JSON.stringify(data))
            })
            stream.on('end', db.close.bind(db))
        a(data-bespoke-run) Run!

      section
        h2 How to use LevelUp to build a Graph Database
        h1
          i.fa.fa-question-circle.fa-2x

        h3 Let's build an Hexastore!

      section.full-imgs
        h2 Hexastore
        br
        br
        div
          div(style="width: 50%; text-align: left; float: right; display: inline-block;")
            | We store 6 keys for each triple:
            ul.bullet
              li spo::A::C::B
              li sop::A::B::C
              li ops::B::C::A
              li osp::B::A::C
              li pso::C::A::B
              li pos::C::B::A
          div(style="width: 60%; display: inline-block; float: left; margin-left: -10%;")
            img(src="/images/basic_graph.png")

      section
        h2 Put a Triple in LevelDB
        pre
          code.language-javascript.
            var db = level('your_database')
            var triple = JSON.stringify({
              subject: 'A', predicate: 'C', object: 'B'
            })
            db.batch([
              { key: 'spo::A::C::B', value: triple, type: 'put' },
              { key: 'sop::A::B::C', value: triple, type: 'put' },
              { key: 'ops::B::C::A', value: triple, type: 'put' },
              { key: 'osp::B::A::C', value: triple, type: 'put' },
              { key: 'pso::C::A::B', value: triple, type: 'put' },
              { key: 'pos::C::B::A', value: triple, type: 'put' }
            ], db.close.bind(db))

        a(data-bespoke-run) Run!

      section
        h2 Ask a Triple to LevelDB
        p
          em all nodes that are connected by "C"
        pre
          code.language-javascript.
            var db = level('your_database')
            var stream = db.createReadStream({
              start: 'pso::C::',
              end:   'pso::C::\xff'
            })

            stream.on('data', function(data) {
              alert(data.value)
            })

            stream.on('end', db.close.bind(db))

        a(data-bespoke-run) Run!

      section.full-imgs
        h2 LevelGraph
        div
          img(src="/images/logo.png")

        h3 <a href="http://github.com/mcollina/levelgraph">http://github.com/mcollina/levelgraph</a>

      section
        h2 LevelGraph
        ul
          li is an Hexastore built on LevelDB and LevelUp
          li v0.1.0 was built on the night between the 25th and 26th of April 2013
          li v0.8.0 was released this Christmas
          li 250+ commits and counting
          li works on Node and in the Browser
          li small in size (&lt; 1000 own lines of code)
          li big on dependencies (~ 11000 lines of code)
          li available on npm, bower or straight from github

      section
        h2 Put Triples in LevelGraph
        pre
          code.language-javascript.
            var graph = levelgraph('your_graph')
            var triples = [{
              subject: 'A', predicate: 'C', object: 'B'
            }, {
              subject: 'D', predicate: 'C', object: 'E'
            }]
            graph.put(triples, function(err) {
              alert(err || "Successful!")
              graph.close()
            })

        a(data-bespoke-run) Run!

      section
        h2 Ask Triples to LevelGraph
        p
          em all nodes that are connected by "C"
        pre
          code.language-javascript.
            var graph = levelgraph('your_graph')
            var query = { predicate: 'C' }

            graph.get(query, function(err, triples) {
              alert(JSON.stringify(triples))
              graph.close();
            })

        a(data-bespoke-run) Run!

      section
        h2 Deleting Triples in LevelGraph
        pre
          code.language-javascript.
            var graph = levelgraph('your_graph')
            var triples = [
              { subject: 'A', predicate: 'C', object: 'B' },
              { subject: 'D', predicate: 'C', object: 'E' }
            ]
            graph.del(triples, function(err) {
              graph.get({ predicate: 'C' }, function(err, triples) {
                alert('LG found ' + triples.length + ' triples')
                graph.close()
              })
            })

        a(data-bespoke-run) Run!

      section
        h2 Stream Triples in LevelGraph
        pre
          code.language-javascript.
            var graph = levelgraph('your_graph')
            var stream = graph.putStream()

            stream.write({
              subject: 'matteo', predicate: 'friend', object: 'lucio'
            })
            stream.write({
              subject: 'lucio', predicate: 'likes', object: 'beer'
            })
            stream.write({
              subject: 'matteo', predicate: 'likes', object: 'beer'
            })
            stream.end(null, alert.bind(null, 'Successful!'))

        a(data-bespoke-run) Run!

      section
        h2 Stream Triples out of LevelGraph
        p
          em all people that likes beer
        pre
          code.language-javascript.
            var graph = levelgraph('your_graph')
            var stream = graph.getStream({
              predicate: 'likes',
              object: 'beer'
            })
            stream.on('data', function(triple) {
              alert(JSON.stringify(triple))
            })
            stream.on('end', graph.close.bind(graph))

        a(data-bespoke-run) Run!

      section
        h2 Is it all?
        h3 We did not build a graph &nbsp;
          em just &nbsp;
          | for this?


      section
        h2 How fast is LevelGraph?
        ul.bullet
          li 
            b GET &nbsp;
            | Up to 50.000 triples per second
          li
            b PUT &nbsp;
            | Up to 22.000 triples per second

      section
        h1 Thanks!
        br
        p If you need help with node.js:
        br
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a>
        h3 <a href="http://www.matteocollina.com">www.matteocollina.com</a>

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-forms/dist/bespoke-forms.min.js')
    script(src='bower_components/bespoke-run/dist/bespoke-run.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/bundle.js')
    script(src='scripts/main.js')
    // endbuild
